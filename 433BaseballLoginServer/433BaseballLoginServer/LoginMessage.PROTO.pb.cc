// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LoginMessage.PROTO

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stdafx.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace LoginProtocol {

namespace {

const ::google::protobuf::Descriptor* CLS_login_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLS_login_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* LSC_login_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LSC_login_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLS_account_create_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLS_account_create_reflection_ = NULL;
const ::google::protobuf::Descriptor* LSC_account_create_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LSC_account_create_result_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PacketType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FailSignal_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_LoginMessage_2ePROTO() {
  protobuf_AddDesc_LoginMessage_2ePROTO();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LoginMessage.PROTO");
  GOOGLE_CHECK(file != NULL);
  CLS_login_request_descriptor_ = file->message_type(0);
  static const int CLS_login_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLS_login_request, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLS_login_request, password_),
  };
  CLS_login_request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CLS_login_request_descriptor_,
      CLS_login_request::default_instance_,
      CLS_login_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLS_login_request, _has_bits_[0]),
      -1,
      -1,
      sizeof(CLS_login_request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLS_login_request, _internal_metadata_),
      -1);
  LSC_login_result_descriptor_ = file->message_type(1);
  static const int LSC_login_result_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LSC_login_result, failsignal_),
  };
  LSC_login_result_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LSC_login_result_descriptor_,
      LSC_login_result::default_instance_,
      LSC_login_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LSC_login_result, _has_bits_[0]),
      -1,
      -1,
      sizeof(LSC_login_result),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LSC_login_result, _internal_metadata_),
      -1);
  CLS_account_create_descriptor_ = file->message_type(2);
  static const int CLS_account_create_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLS_account_create, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLS_account_create, password_),
  };
  CLS_account_create_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CLS_account_create_descriptor_,
      CLS_account_create::default_instance_,
      CLS_account_create_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLS_account_create, _has_bits_[0]),
      -1,
      -1,
      sizeof(CLS_account_create),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLS_account_create, _internal_metadata_),
      -1);
  LSC_account_create_result_descriptor_ = file->message_type(3);
  static const int LSC_account_create_result_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LSC_account_create_result, failsignal_),
  };
  LSC_account_create_result_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LSC_account_create_result_descriptor_,
      LSC_account_create_result::default_instance_,
      LSC_account_create_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LSC_account_create_result, _has_bits_[0]),
      -1,
      -1,
      sizeof(LSC_account_create_result),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LSC_account_create_result, _internal_metadata_),
      -1);
  PacketType_descriptor_ = file->enum_type(0);
  FailSignal_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LoginMessage_2ePROTO);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CLS_login_request_descriptor_, &CLS_login_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LSC_login_result_descriptor_, &LSC_login_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CLS_account_create_descriptor_, &CLS_account_create::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LSC_account_create_result_descriptor_, &LSC_account_create_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LoginMessage_2ePROTO() {
  delete CLS_login_request::default_instance_;
  delete CLS_login_request_reflection_;
  delete LSC_login_result::default_instance_;
  delete LSC_login_result_reflection_;
  delete CLS_account_create::default_instance_;
  delete CLS_account_create_reflection_;
  delete LSC_account_create_result::default_instance_;
  delete LSC_account_create_result_reflection_;
}

void protobuf_AddDesc_LoginMessage_2ePROTO() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022LoginMessage.PROTO\022\rLoginProtocol\"1\n\021C"
    "LS_login_request\022\n\n\002id\030\001 \001(\t\022\020\n\010password"
    "\030\002 \001(\t\"A\n\020LSC_login_result\022-\n\nfailsignal"
    "\030\001 \001(\0162\031.LoginProtocol.FailSignal\"2\n\022CLS"
    "_account_create\022\n\n\002id\030\001 \001(\t\022\020\n\010password\030"
    "\002 \001(\t\"J\n\031LSC_account_create_result\022-\n\nfa"
    "ilSignal\030\001 \001(\0162\031.LoginProtocol.FailSigna"
    "l*\247\001\n\nPacketType\022\025\n\021CLS_LOGIN_REQUEST\020\000\022"
    "\025\n\021LSC_LOGIN_SUCCESS\020\001\022\024\n\020LSC_LOGIN_FAIL"
    "ED\020\002\022\026\n\022CLS_ACCOUNT_CREATE\020\003\022\036\n\032LSC_ACCO"
    "UNT_CREATE_SUCCESS\020\004\022\035\n\031LSC_ACCOUNT_CREA"
    "TE_FAILED\020\005*A\n\nFailSignal\022\014\n\010NO_EXIST\020\000\022"
    "\021\n\rALREADY_EXIST\020\001\022\022\n\016WRONG_PASSWORD\020\002", 518);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LoginMessage.PROTO", &protobuf_RegisterTypes);
  CLS_login_request::default_instance_ = new CLS_login_request();
  LSC_login_result::default_instance_ = new LSC_login_result();
  CLS_account_create::default_instance_ = new CLS_account_create();
  LSC_account_create_result::default_instance_ = new LSC_account_create_result();
  CLS_login_request::default_instance_->InitAsDefaultInstance();
  LSC_login_result::default_instance_->InitAsDefaultInstance();
  CLS_account_create::default_instance_->InitAsDefaultInstance();
  LSC_account_create_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LoginMessage_2ePROTO);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LoginMessage_2ePROTO {
  StaticDescriptorInitializer_LoginMessage_2ePROTO() {
    protobuf_AddDesc_LoginMessage_2ePROTO();
  }
} static_descriptor_initializer_LoginMessage_2ePROTO_;
const ::google::protobuf::EnumDescriptor* PacketType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PacketType_descriptor_;
}
bool PacketType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FailSignal_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FailSignal_descriptor_;
}
bool FailSignal_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CLS_login_request::kIdFieldNumber;
const int CLS_login_request::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CLS_login_request::CLS_login_request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginProtocol.CLS_login_request)
}

void CLS_login_request::InitAsDefaultInstance() {
}

CLS_login_request::CLS_login_request(const CLS_login_request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LoginProtocol.CLS_login_request)
}

void CLS_login_request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLS_login_request::~CLS_login_request() {
  // @@protoc_insertion_point(destructor:LoginProtocol.CLS_login_request)
  SharedDtor();
}

void CLS_login_request::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CLS_login_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLS_login_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLS_login_request_descriptor_;
}

const CLS_login_request& CLS_login_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2ePROTO();
  return *default_instance_;
}

CLS_login_request* CLS_login_request::default_instance_ = NULL;

CLS_login_request* CLS_login_request::New(::google::protobuf::Arena* arena) const {
  CLS_login_request* n = new CLS_login_request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CLS_login_request::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_password()) {
      password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CLS_login_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LoginProtocol.CLS_login_request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "LoginProtocol.CLS_login_request.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "LoginProtocol.CLS_login_request.password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LoginProtocol.CLS_login_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LoginProtocol.CLS_login_request)
  return false;
#undef DO_
}

void CLS_login_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LoginProtocol.CLS_login_request)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LoginProtocol.CLS_login_request.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LoginProtocol.CLS_login_request.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LoginProtocol.CLS_login_request)
}

::google::protobuf::uint8* CLS_login_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginProtocol.CLS_login_request)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LoginProtocol.CLS_login_request.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LoginProtocol.CLS_login_request.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginProtocol.CLS_login_request)
  return target;
}

int CLS_login_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLS_login_request::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CLS_login_request* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CLS_login_request>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLS_login_request::MergeFrom(const CLS_login_request& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_password()) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CLS_login_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLS_login_request::CopyFrom(const CLS_login_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLS_login_request::IsInitialized() const {

  return true;
}

void CLS_login_request::Swap(CLS_login_request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CLS_login_request::InternalSwap(CLS_login_request* other) {
  id_.Swap(&other->id_);
  password_.Swap(&other->password_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CLS_login_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLS_login_request_descriptor_;
  metadata.reflection = CLS_login_request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CLS_login_request

// optional string id = 1;
bool CLS_login_request::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CLS_login_request::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CLS_login_request::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CLS_login_request::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& CLS_login_request::id() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.CLS_login_request.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CLS_login_request::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginProtocol.CLS_login_request.id)
}
 void CLS_login_request::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginProtocol.CLS_login_request.id)
}
 void CLS_login_request::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginProtocol.CLS_login_request.id)
}
 ::std::string* CLS_login_request::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:LoginProtocol.CLS_login_request.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CLS_login_request::release_id() {
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CLS_login_request::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:LoginProtocol.CLS_login_request.id)
}

// optional string password = 2;
bool CLS_login_request::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CLS_login_request::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
void CLS_login_request::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
void CLS_login_request::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
 const ::std::string& CLS_login_request::password() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.CLS_login_request.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CLS_login_request::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginProtocol.CLS_login_request.password)
}
 void CLS_login_request::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginProtocol.CLS_login_request.password)
}
 void CLS_login_request::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginProtocol.CLS_login_request.password)
}
 ::std::string* CLS_login_request::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:LoginProtocol.CLS_login_request.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CLS_login_request::release_password() {
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CLS_login_request::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:LoginProtocol.CLS_login_request.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LSC_login_result::kFailsignalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LSC_login_result::LSC_login_result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginProtocol.LSC_login_result)
}

void LSC_login_result::InitAsDefaultInstance() {
}

LSC_login_result::LSC_login_result(const LSC_login_result& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LoginProtocol.LSC_login_result)
}

void LSC_login_result::SharedCtor() {
  _cached_size_ = 0;
  failsignal_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LSC_login_result::~LSC_login_result() {
  // @@protoc_insertion_point(destructor:LoginProtocol.LSC_login_result)
  SharedDtor();
}

void LSC_login_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LSC_login_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LSC_login_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LSC_login_result_descriptor_;
}

const LSC_login_result& LSC_login_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2ePROTO();
  return *default_instance_;
}

LSC_login_result* LSC_login_result::default_instance_ = NULL;

LSC_login_result* LSC_login_result::New(::google::protobuf::Arena* arena) const {
  LSC_login_result* n = new LSC_login_result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LSC_login_result::Clear() {
  failsignal_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LSC_login_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LoginProtocol.LSC_login_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LoginProtocol.FailSignal failsignal = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LoginProtocol::FailSignal_IsValid(value)) {
            set_failsignal(static_cast< ::LoginProtocol::FailSignal >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LoginProtocol.LSC_login_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LoginProtocol.LSC_login_result)
  return false;
#undef DO_
}

void LSC_login_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LoginProtocol.LSC_login_result)
  // optional .LoginProtocol.FailSignal failsignal = 1;
  if (has_failsignal()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->failsignal(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LoginProtocol.LSC_login_result)
}

::google::protobuf::uint8* LSC_login_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginProtocol.LSC_login_result)
  // optional .LoginProtocol.FailSignal failsignal = 1;
  if (has_failsignal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->failsignal(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginProtocol.LSC_login_result)
  return target;
}

int LSC_login_result::ByteSize() const {
  int total_size = 0;

  // optional .LoginProtocol.FailSignal failsignal = 1;
  if (has_failsignal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->failsignal());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LSC_login_result::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LSC_login_result* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LSC_login_result>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LSC_login_result::MergeFrom(const LSC_login_result& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_failsignal()) {
      set_failsignal(from.failsignal());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LSC_login_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LSC_login_result::CopyFrom(const LSC_login_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LSC_login_result::IsInitialized() const {

  return true;
}

void LSC_login_result::Swap(LSC_login_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LSC_login_result::InternalSwap(LSC_login_result* other) {
  std::swap(failsignal_, other->failsignal_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LSC_login_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LSC_login_result_descriptor_;
  metadata.reflection = LSC_login_result_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LSC_login_result

// optional .LoginProtocol.FailSignal failsignal = 1;
bool LSC_login_result::has_failsignal() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LSC_login_result::set_has_failsignal() {
  _has_bits_[0] |= 0x00000001u;
}
void LSC_login_result::clear_has_failsignal() {
  _has_bits_[0] &= ~0x00000001u;
}
void LSC_login_result::clear_failsignal() {
  failsignal_ = 0;
  clear_has_failsignal();
}
 ::LoginProtocol::FailSignal LSC_login_result::failsignal() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.LSC_login_result.failsignal)
  return static_cast< ::LoginProtocol::FailSignal >(failsignal_);
}
 void LSC_login_result::set_failsignal(::LoginProtocol::FailSignal value) {
  assert(::LoginProtocol::FailSignal_IsValid(value));
  set_has_failsignal();
  failsignal_ = value;
  // @@protoc_insertion_point(field_set:LoginProtocol.LSC_login_result.failsignal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CLS_account_create::kIdFieldNumber;
const int CLS_account_create::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CLS_account_create::CLS_account_create()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginProtocol.CLS_account_create)
}

void CLS_account_create::InitAsDefaultInstance() {
}

CLS_account_create::CLS_account_create(const CLS_account_create& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LoginProtocol.CLS_account_create)
}

void CLS_account_create::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLS_account_create::~CLS_account_create() {
  // @@protoc_insertion_point(destructor:LoginProtocol.CLS_account_create)
  SharedDtor();
}

void CLS_account_create::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CLS_account_create::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLS_account_create::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLS_account_create_descriptor_;
}

const CLS_account_create& CLS_account_create::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2ePROTO();
  return *default_instance_;
}

CLS_account_create* CLS_account_create::default_instance_ = NULL;

CLS_account_create* CLS_account_create::New(::google::protobuf::Arena* arena) const {
  CLS_account_create* n = new CLS_account_create;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CLS_account_create::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_password()) {
      password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CLS_account_create::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LoginProtocol.CLS_account_create)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "LoginProtocol.CLS_account_create.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "LoginProtocol.CLS_account_create.password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LoginProtocol.CLS_account_create)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LoginProtocol.CLS_account_create)
  return false;
#undef DO_
}

void CLS_account_create::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LoginProtocol.CLS_account_create)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LoginProtocol.CLS_account_create.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LoginProtocol.CLS_account_create.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LoginProtocol.CLS_account_create)
}

::google::protobuf::uint8* CLS_account_create::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginProtocol.CLS_account_create)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LoginProtocol.CLS_account_create.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LoginProtocol.CLS_account_create.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginProtocol.CLS_account_create)
  return target;
}

int CLS_account_create::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLS_account_create::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CLS_account_create* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CLS_account_create>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLS_account_create::MergeFrom(const CLS_account_create& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_password()) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CLS_account_create::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLS_account_create::CopyFrom(const CLS_account_create& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLS_account_create::IsInitialized() const {

  return true;
}

void CLS_account_create::Swap(CLS_account_create* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CLS_account_create::InternalSwap(CLS_account_create* other) {
  id_.Swap(&other->id_);
  password_.Swap(&other->password_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CLS_account_create::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLS_account_create_descriptor_;
  metadata.reflection = CLS_account_create_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CLS_account_create

// optional string id = 1;
bool CLS_account_create::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CLS_account_create::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CLS_account_create::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CLS_account_create::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& CLS_account_create::id() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.CLS_account_create.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CLS_account_create::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginProtocol.CLS_account_create.id)
}
 void CLS_account_create::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginProtocol.CLS_account_create.id)
}
 void CLS_account_create::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginProtocol.CLS_account_create.id)
}
 ::std::string* CLS_account_create::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:LoginProtocol.CLS_account_create.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CLS_account_create::release_id() {
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CLS_account_create::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:LoginProtocol.CLS_account_create.id)
}

// optional string password = 2;
bool CLS_account_create::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CLS_account_create::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
void CLS_account_create::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
void CLS_account_create::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
 const ::std::string& CLS_account_create::password() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.CLS_account_create.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CLS_account_create::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginProtocol.CLS_account_create.password)
}
 void CLS_account_create::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginProtocol.CLS_account_create.password)
}
 void CLS_account_create::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginProtocol.CLS_account_create.password)
}
 ::std::string* CLS_account_create::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:LoginProtocol.CLS_account_create.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CLS_account_create::release_password() {
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CLS_account_create::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:LoginProtocol.CLS_account_create.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LSC_account_create_result::kFailSignalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LSC_account_create_result::LSC_account_create_result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginProtocol.LSC_account_create_result)
}

void LSC_account_create_result::InitAsDefaultInstance() {
}

LSC_account_create_result::LSC_account_create_result(const LSC_account_create_result& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LoginProtocol.LSC_account_create_result)
}

void LSC_account_create_result::SharedCtor() {
  _cached_size_ = 0;
  failsignal_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LSC_account_create_result::~LSC_account_create_result() {
  // @@protoc_insertion_point(destructor:LoginProtocol.LSC_account_create_result)
  SharedDtor();
}

void LSC_account_create_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LSC_account_create_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LSC_account_create_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LSC_account_create_result_descriptor_;
}

const LSC_account_create_result& LSC_account_create_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2ePROTO();
  return *default_instance_;
}

LSC_account_create_result* LSC_account_create_result::default_instance_ = NULL;

LSC_account_create_result* LSC_account_create_result::New(::google::protobuf::Arena* arena) const {
  LSC_account_create_result* n = new LSC_account_create_result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LSC_account_create_result::Clear() {
  failsignal_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LSC_account_create_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LoginProtocol.LSC_account_create_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LoginProtocol.FailSignal failSignal = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LoginProtocol::FailSignal_IsValid(value)) {
            set_failsignal(static_cast< ::LoginProtocol::FailSignal >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LoginProtocol.LSC_account_create_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LoginProtocol.LSC_account_create_result)
  return false;
#undef DO_
}

void LSC_account_create_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LoginProtocol.LSC_account_create_result)
  // optional .LoginProtocol.FailSignal failSignal = 1;
  if (has_failsignal()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->failsignal(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LoginProtocol.LSC_account_create_result)
}

::google::protobuf::uint8* LSC_account_create_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginProtocol.LSC_account_create_result)
  // optional .LoginProtocol.FailSignal failSignal = 1;
  if (has_failsignal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->failsignal(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginProtocol.LSC_account_create_result)
  return target;
}

int LSC_account_create_result::ByteSize() const {
  int total_size = 0;

  // optional .LoginProtocol.FailSignal failSignal = 1;
  if (has_failsignal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->failsignal());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LSC_account_create_result::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LSC_account_create_result* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LSC_account_create_result>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LSC_account_create_result::MergeFrom(const LSC_account_create_result& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_failsignal()) {
      set_failsignal(from.failsignal());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LSC_account_create_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LSC_account_create_result::CopyFrom(const LSC_account_create_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LSC_account_create_result::IsInitialized() const {

  return true;
}

void LSC_account_create_result::Swap(LSC_account_create_result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LSC_account_create_result::InternalSwap(LSC_account_create_result* other) {
  std::swap(failsignal_, other->failsignal_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LSC_account_create_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LSC_account_create_result_descriptor_;
  metadata.reflection = LSC_account_create_result_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LSC_account_create_result

// optional .LoginProtocol.FailSignal failSignal = 1;
bool LSC_account_create_result::has_failsignal() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LSC_account_create_result::set_has_failsignal() {
  _has_bits_[0] |= 0x00000001u;
}
void LSC_account_create_result::clear_has_failsignal() {
  _has_bits_[0] &= ~0x00000001u;
}
void LSC_account_create_result::clear_failsignal() {
  failsignal_ = 0;
  clear_has_failsignal();
}
 ::LoginProtocol::FailSignal LSC_account_create_result::failsignal() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.LSC_account_create_result.failSignal)
  return static_cast< ::LoginProtocol::FailSignal >(failsignal_);
}
 void LSC_account_create_result::set_failsignal(::LoginProtocol::FailSignal value) {
  assert(::LoginProtocol::FailSignal_IsValid(value));
  set_has_failsignal();
  failsignal_ = value;
  // @@protoc_insertion_point(field_set:LoginProtocol.LSC_account_create_result.failSignal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace LoginProtocol

// @@protoc_insertion_point(global_scope)
