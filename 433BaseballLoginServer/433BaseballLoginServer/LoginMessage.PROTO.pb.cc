// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LoginMessage.PROTO

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LoginMessage.PROTO.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {

namespace {

const ::google::protobuf::Descriptor* PacketHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PacketHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLS_login_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLS_login_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* LSC_login_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LSC_login_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLS_account_create_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLS_account_create_reflection_ = NULL;
const ::google::protobuf::Descriptor* LSC_account_create_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LSC_account_create_result_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PacketType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FailSignal_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_LoginMessage_2ePROTO() {
  protobuf_AddDesc_LoginMessage_2ePROTO();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LoginMessage.PROTO");
  GOOGLE_CHECK(file != NULL);
  PacketHeader_descriptor_ = file->message_type(0);
  static const int PacketHeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader, type_),
  };
  PacketHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PacketHeader_descriptor_,
      PacketHeader::default_instance_,
      PacketHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PacketHeader));
  CLS_login_request_descriptor_ = file->message_type(1);
  static const int CLS_login_request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLS_login_request, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLS_login_request, password_),
  };
  CLS_login_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLS_login_request_descriptor_,
      CLS_login_request::default_instance_,
      CLS_login_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLS_login_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLS_login_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLS_login_request));
  LSC_login_result_descriptor_ = file->message_type(2);
  static const int LSC_login_result_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LSC_login_result, failsignal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LSC_login_result, securitycode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LSC_login_result, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LSC_login_result, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LSC_login_result, wincnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LSC_login_result, losecnt_),
  };
  LSC_login_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LSC_login_result_descriptor_,
      LSC_login_result::default_instance_,
      LSC_login_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LSC_login_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LSC_login_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LSC_login_result));
  CLS_account_create_descriptor_ = file->message_type(3);
  static const int CLS_account_create_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLS_account_create, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLS_account_create, password_),
  };
  CLS_account_create_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLS_account_create_descriptor_,
      CLS_account_create::default_instance_,
      CLS_account_create_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLS_account_create, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLS_account_create, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLS_account_create));
  LSC_account_create_result_descriptor_ = file->message_type(4);
  static const int LSC_account_create_result_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LSC_account_create_result, failsignal_),
  };
  LSC_account_create_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LSC_account_create_result_descriptor_,
      LSC_account_create_result::default_instance_,
      LSC_account_create_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LSC_account_create_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LSC_account_create_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LSC_account_create_result));
  PacketType_descriptor_ = file->enum_type(0);
  FailSignal_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LoginMessage_2ePROTO);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PacketHeader_descriptor_, &PacketHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLS_login_request_descriptor_, &CLS_login_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LSC_login_result_descriptor_, &LSC_login_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLS_account_create_descriptor_, &CLS_account_create::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LSC_account_create_result_descriptor_, &LSC_account_create_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LoginMessage_2ePROTO() {
  delete PacketHeader::default_instance_;
  delete PacketHeader_reflection_;
  delete CLS_login_request::default_instance_;
  delete CLS_login_request_reflection_;
  delete LSC_login_result::default_instance_;
  delete LSC_login_result_reflection_;
  delete CLS_account_create::default_instance_;
  delete CLS_account_create_reflection_;
  delete LSC_account_create_result::default_instance_;
  delete LSC_account_create_result_reflection_;
}

void protobuf_AddDesc_LoginMessage_2ePROTO() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022LoginMessage.PROTO\022\010protocol\"*\n\014Packet"
    "Header\022\014\n\004size\030\001 \001(\007\022\014\n\004type\030\002 \001(\007\"1\n\021CL"
    "S_login_request\022\n\n\002id\030\001 \001(\t\022\020\n\010password\030"
    "\002 \001(\t\"\215\001\n\020LSC_login_result\022(\n\nfailsignal"
    "\030\001 \001(\0162\024.protocol.FailSignal\022\024\n\014security"
    "Code\030\002 \001(\t\022\n\n\002ip\030\003 \001(\t\022\014\n\004port\030\004 \001(\005\022\016\n\006"
    "winCnt\030\005 \001(\005\022\017\n\007loseCnt\030\006 \001(\005\"2\n\022CLS_acc"
    "ount_create\022\n\n\002id\030\001 \001(\t\022\020\n\010password\030\002 \001("
    "\t\"E\n\031LSC_account_create_result\022(\n\nfailSi"
    "gnal\030\001 \001(\0162\024.protocol.FailSignal*p\n\nPack"
    "etType\022\025\n\021CLS_LOGIN_REQUEST\020\000\022\024\n\020LSC_LOG"
    "IN_RESULT\020\001\022\026\n\022CLS_ACCOUNT_CREATE\020\002\022\035\n\031L"
    "SC_ACCOUNT_CREATE_RESULT\020\003*N\n\nFailSignal"
    "\022\013\n\007UNKNOWN\020\000\022\014\n\010NO_EXIST\020\001\022\021\n\rALREADY_E"
    "XIST\020\002\022\022\n\016WRONG_PASSWORD\020\003", 586);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LoginMessage.PROTO", &protobuf_RegisterTypes);
  PacketHeader::default_instance_ = new PacketHeader();
  CLS_login_request::default_instance_ = new CLS_login_request();
  LSC_login_result::default_instance_ = new LSC_login_result();
  CLS_account_create::default_instance_ = new CLS_account_create();
  LSC_account_create_result::default_instance_ = new LSC_account_create_result();
  PacketHeader::default_instance_->InitAsDefaultInstance();
  CLS_login_request::default_instance_->InitAsDefaultInstance();
  LSC_login_result::default_instance_->InitAsDefaultInstance();
  CLS_account_create::default_instance_->InitAsDefaultInstance();
  LSC_account_create_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LoginMessage_2ePROTO);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LoginMessage_2ePROTO {
  StaticDescriptorInitializer_LoginMessage_2ePROTO() {
    protobuf_AddDesc_LoginMessage_2ePROTO();
  }
} static_descriptor_initializer_LoginMessage_2ePROTO_;
const ::google::protobuf::EnumDescriptor* PacketType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PacketType_descriptor_;
}
bool PacketType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FailSignal_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FailSignal_descriptor_;
}
bool FailSignal_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PacketHeader::kSizeFieldNumber;
const int PacketHeader::kTypeFieldNumber;
#endif  // !_MSC_VER

PacketHeader::PacketHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.PacketHeader)
}

void PacketHeader::InitAsDefaultInstance() {
}

PacketHeader::PacketHeader(const PacketHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.PacketHeader)
}

void PacketHeader::SharedCtor() {
  _cached_size_ = 0;
  size_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PacketHeader::~PacketHeader() {
  // @@protoc_insertion_point(destructor:protocol.PacketHeader)
  SharedDtor();
}

void PacketHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PacketHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PacketHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PacketHeader_descriptor_;
}

const PacketHeader& PacketHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2ePROTO();
  return *default_instance_;
}

PacketHeader* PacketHeader::default_instance_ = NULL;

PacketHeader* PacketHeader::New() const {
  return new PacketHeader;
}

void PacketHeader::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PacketHeader*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(size_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PacketHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.PacketHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 size = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_type;
        break;
      }

      // optional fixed32 type = 2;
      case 2: {
        if (tag == 21) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.PacketHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.PacketHeader)
  return false;
#undef DO_
}

void PacketHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.PacketHeader)
  // optional fixed32 size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->size(), output);
  }

  // optional fixed32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.PacketHeader)
}

::google::protobuf::uint8* PacketHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.PacketHeader)
  // optional fixed32 size = 1;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->size(), target);
  }

  // optional fixed32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.PacketHeader)
  return target;
}

int PacketHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 size = 1;
    if (has_size()) {
      total_size += 1 + 4;
    }

    // optional fixed32 type = 2;
    if (has_type()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PacketHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PacketHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PacketHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PacketHeader::MergeFrom(const PacketHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PacketHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketHeader::CopyFrom(const PacketHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketHeader::IsInitialized() const {

  return true;
}

void PacketHeader::Swap(PacketHeader* other) {
  if (other != this) {
    std::swap(size_, other->size_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PacketHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PacketHeader_descriptor_;
  metadata.reflection = PacketHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLS_login_request::kIdFieldNumber;
const int CLS_login_request::kPasswordFieldNumber;
#endif  // !_MSC_VER

CLS_login_request::CLS_login_request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.CLS_login_request)
}

void CLS_login_request::InitAsDefaultInstance() {
}

CLS_login_request::CLS_login_request(const CLS_login_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.CLS_login_request)
}

void CLS_login_request::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLS_login_request::~CLS_login_request() {
  // @@protoc_insertion_point(destructor:protocol.CLS_login_request)
  SharedDtor();
}

void CLS_login_request::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void CLS_login_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLS_login_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLS_login_request_descriptor_;
}

const CLS_login_request& CLS_login_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2ePROTO();
  return *default_instance_;
}

CLS_login_request* CLS_login_request::default_instance_ = NULL;

CLS_login_request* CLS_login_request::New() const {
  return new CLS_login_request;
}

void CLS_login_request::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLS_login_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.CLS_login_request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.CLS_login_request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.CLS_login_request)
  return false;
#undef DO_
}

void CLS_login_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.CLS_login_request)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.CLS_login_request)
}

::google::protobuf::uint8* CLS_login_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.CLS_login_request)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.CLS_login_request)
  return target;
}

int CLS_login_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLS_login_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLS_login_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLS_login_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLS_login_request::MergeFrom(const CLS_login_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLS_login_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLS_login_request::CopyFrom(const CLS_login_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLS_login_request::IsInitialized() const {

  return true;
}

void CLS_login_request::Swap(CLS_login_request* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLS_login_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLS_login_request_descriptor_;
  metadata.reflection = CLS_login_request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LSC_login_result::kFailsignalFieldNumber;
const int LSC_login_result::kSecurityCodeFieldNumber;
const int LSC_login_result::kIpFieldNumber;
const int LSC_login_result::kPortFieldNumber;
const int LSC_login_result::kWinCntFieldNumber;
const int LSC_login_result::kLoseCntFieldNumber;
#endif  // !_MSC_VER

LSC_login_result::LSC_login_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.LSC_login_result)
}

void LSC_login_result::InitAsDefaultInstance() {
}

LSC_login_result::LSC_login_result(const LSC_login_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.LSC_login_result)
}

void LSC_login_result::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  failsignal_ = 0;
  securitycode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  wincnt_ = 0;
  losecnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LSC_login_result::~LSC_login_result() {
  // @@protoc_insertion_point(destructor:protocol.LSC_login_result)
  SharedDtor();
}

void LSC_login_result::SharedDtor() {
  if (securitycode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete securitycode_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void LSC_login_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LSC_login_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LSC_login_result_descriptor_;
}

const LSC_login_result& LSC_login_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2ePROTO();
  return *default_instance_;
}

LSC_login_result* LSC_login_result::default_instance_ = NULL;

LSC_login_result* LSC_login_result::New() const {
  return new LSC_login_result;
}

void LSC_login_result::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LSC_login_result*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(failsignal_, port_);
    ZR_(wincnt_, losecnt_);
    if (has_securitycode()) {
      if (securitycode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        securitycode_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LSC_login_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.LSC_login_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.FailSignal failsignal = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::FailSignal_IsValid(value)) {
            set_failsignal(static_cast< ::protocol::FailSignal >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_securityCode;
        break;
      }

      // optional string securityCode = 2;
      case 2: {
        if (tag == 18) {
         parse_securityCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_securitycode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->securitycode().data(), this->securitycode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "securitycode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (tag == 26) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // optional int32 port = 4;
      case 4: {
        if (tag == 32) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_winCnt;
        break;
      }

      // optional int32 winCnt = 5;
      case 5: {
        if (tag == 40) {
         parse_winCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wincnt_)));
          set_has_wincnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_loseCnt;
        break;
      }

      // optional int32 loseCnt = 6;
      case 6: {
        if (tag == 48) {
         parse_loseCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &losecnt_)));
          set_has_losecnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.LSC_login_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.LSC_login_result)
  return false;
#undef DO_
}

void LSC_login_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.LSC_login_result)
  // optional .protocol.FailSignal failsignal = 1;
  if (has_failsignal()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->failsignal(), output);
  }

  // optional string securityCode = 2;
  if (has_securitycode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->securitycode().data(), this->securitycode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "securitycode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->securitycode(), output);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // optional int32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  // optional int32 winCnt = 5;
  if (has_wincnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wincnt(), output);
  }

  // optional int32 loseCnt = 6;
  if (has_losecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->losecnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.LSC_login_result)
}

::google::protobuf::uint8* LSC_login_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.LSC_login_result)
  // optional .protocol.FailSignal failsignal = 1;
  if (has_failsignal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->failsignal(), target);
  }

  // optional string securityCode = 2;
  if (has_securitycode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->securitycode().data(), this->securitycode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "securitycode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->securitycode(), target);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional int32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  // optional int32 winCnt = 5;
  if (has_wincnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->wincnt(), target);
  }

  // optional int32 loseCnt = 6;
  if (has_losecnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->losecnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.LSC_login_result)
  return target;
}

int LSC_login_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocol.FailSignal failsignal = 1;
    if (has_failsignal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->failsignal());
    }

    // optional string securityCode = 2;
    if (has_securitycode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->securitycode());
    }

    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional int32 winCnt = 5;
    if (has_wincnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wincnt());
    }

    // optional int32 loseCnt = 6;
    if (has_losecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->losecnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LSC_login_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LSC_login_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LSC_login_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LSC_login_result::MergeFrom(const LSC_login_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_failsignal()) {
      set_failsignal(from.failsignal());
    }
    if (from.has_securitycode()) {
      set_securitycode(from.securitycode());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_wincnt()) {
      set_wincnt(from.wincnt());
    }
    if (from.has_losecnt()) {
      set_losecnt(from.losecnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LSC_login_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LSC_login_result::CopyFrom(const LSC_login_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LSC_login_result::IsInitialized() const {

  return true;
}

void LSC_login_result::Swap(LSC_login_result* other) {
  if (other != this) {
    std::swap(failsignal_, other->failsignal_);
    std::swap(securitycode_, other->securitycode_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(wincnt_, other->wincnt_);
    std::swap(losecnt_, other->losecnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LSC_login_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LSC_login_result_descriptor_;
  metadata.reflection = LSC_login_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLS_account_create::kIdFieldNumber;
const int CLS_account_create::kPasswordFieldNumber;
#endif  // !_MSC_VER

CLS_account_create::CLS_account_create()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.CLS_account_create)
}

void CLS_account_create::InitAsDefaultInstance() {
}

CLS_account_create::CLS_account_create(const CLS_account_create& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.CLS_account_create)
}

void CLS_account_create::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLS_account_create::~CLS_account_create() {
  // @@protoc_insertion_point(destructor:protocol.CLS_account_create)
  SharedDtor();
}

void CLS_account_create::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void CLS_account_create::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLS_account_create::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLS_account_create_descriptor_;
}

const CLS_account_create& CLS_account_create::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2ePROTO();
  return *default_instance_;
}

CLS_account_create* CLS_account_create::default_instance_ = NULL;

CLS_account_create* CLS_account_create::New() const {
  return new CLS_account_create;
}

void CLS_account_create::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLS_account_create::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.CLS_account_create)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.CLS_account_create)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.CLS_account_create)
  return false;
#undef DO_
}

void CLS_account_create::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.CLS_account_create)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.CLS_account_create)
}

::google::protobuf::uint8* CLS_account_create::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.CLS_account_create)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.CLS_account_create)
  return target;
}

int CLS_account_create::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLS_account_create::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLS_account_create* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLS_account_create*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLS_account_create::MergeFrom(const CLS_account_create& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLS_account_create::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLS_account_create::CopyFrom(const CLS_account_create& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLS_account_create::IsInitialized() const {

  return true;
}

void CLS_account_create::Swap(CLS_account_create* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLS_account_create::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLS_account_create_descriptor_;
  metadata.reflection = CLS_account_create_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LSC_account_create_result::kFailSignalFieldNumber;
#endif  // !_MSC_VER

LSC_account_create_result::LSC_account_create_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.LSC_account_create_result)
}

void LSC_account_create_result::InitAsDefaultInstance() {
}

LSC_account_create_result::LSC_account_create_result(const LSC_account_create_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.LSC_account_create_result)
}

void LSC_account_create_result::SharedCtor() {
  _cached_size_ = 0;
  failsignal_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LSC_account_create_result::~LSC_account_create_result() {
  // @@protoc_insertion_point(destructor:protocol.LSC_account_create_result)
  SharedDtor();
}

void LSC_account_create_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LSC_account_create_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LSC_account_create_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LSC_account_create_result_descriptor_;
}

const LSC_account_create_result& LSC_account_create_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LoginMessage_2ePROTO();
  return *default_instance_;
}

LSC_account_create_result* LSC_account_create_result::default_instance_ = NULL;

LSC_account_create_result* LSC_account_create_result::New() const {
  return new LSC_account_create_result;
}

void LSC_account_create_result::Clear() {
  failsignal_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LSC_account_create_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.LSC_account_create_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.FailSignal failSignal = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::FailSignal_IsValid(value)) {
            set_failsignal(static_cast< ::protocol::FailSignal >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.LSC_account_create_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.LSC_account_create_result)
  return false;
#undef DO_
}

void LSC_account_create_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.LSC_account_create_result)
  // optional .protocol.FailSignal failSignal = 1;
  if (has_failsignal()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->failsignal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.LSC_account_create_result)
}

::google::protobuf::uint8* LSC_account_create_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.LSC_account_create_result)
  // optional .protocol.FailSignal failSignal = 1;
  if (has_failsignal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->failsignal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.LSC_account_create_result)
  return target;
}

int LSC_account_create_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocol.FailSignal failSignal = 1;
    if (has_failsignal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->failsignal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LSC_account_create_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LSC_account_create_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LSC_account_create_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LSC_account_create_result::MergeFrom(const LSC_account_create_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_failsignal()) {
      set_failsignal(from.failsignal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LSC_account_create_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LSC_account_create_result::CopyFrom(const LSC_account_create_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LSC_account_create_result::IsInitialized() const {

  return true;
}

void LSC_account_create_result::Swap(LSC_account_create_result* other) {
  if (other != this) {
    std::swap(failsignal_, other->failsignal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LSC_account_create_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LSC_account_create_result_descriptor_;
  metadata.reflection = LSC_account_create_result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)
