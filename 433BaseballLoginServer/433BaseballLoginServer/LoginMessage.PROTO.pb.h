// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LoginMessage.PROTO

#ifndef PROTOBUF_LoginMessage_2ePROTO__INCLUDED
#define PROTOBUF_LoginMessage_2ePROTO__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace LoginProtocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_LoginMessage_2ePROTO();
void protobuf_AssignDesc_LoginMessage_2ePROTO();
void protobuf_ShutdownFile_LoginMessage_2ePROTO();

class CLS_account_create;
class CLS_login_request;
class LSC_account_create_result;
class LSC_login_result;

enum PacketType {
  CLS_LOGIN_REQUEST = 0,
  LSC_LOGIN_SUCCESS = 1,
  LSC_LOGIN_FAILED = 2,
  CLS_ACCOUNT_CREATE = 3,
  LSC_ACCOUNT_CREATE_SUCCESS = 4,
  LSC_ACCOUNT_CREATE_FAILED = 5
};
bool PacketType_IsValid(int value);
const PacketType PacketType_MIN = CLS_LOGIN_REQUEST;
const PacketType PacketType_MAX = LSC_ACCOUNT_CREATE_FAILED;
const int PacketType_ARRAYSIZE = PacketType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PacketType_descriptor();
inline const ::std::string& PacketType_Name(PacketType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PacketType_descriptor(), value);
}
inline bool PacketType_Parse(
    const ::std::string& name, PacketType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PacketType>(
    PacketType_descriptor(), name, value);
}
enum FailSignal {
  NO_EXIST = 0,
  ALREADY_EXIST = 1,
  WRONG_PASSWORD = 2
};
bool FailSignal_IsValid(int value);
const FailSignal FailSignal_MIN = NO_EXIST;
const FailSignal FailSignal_MAX = WRONG_PASSWORD;
const int FailSignal_ARRAYSIZE = FailSignal_MAX + 1;

const ::google::protobuf::EnumDescriptor* FailSignal_descriptor();
inline const ::std::string& FailSignal_Name(FailSignal value) {
  return ::google::protobuf::internal::NameOfEnum(
    FailSignal_descriptor(), value);
}
inline bool FailSignal_Parse(
    const ::std::string& name, FailSignal* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FailSignal>(
    FailSignal_descriptor(), name, value);
}
// ===================================================================

class CLS_login_request : public ::google::protobuf::Message {
 public:
  CLS_login_request();
  virtual ~CLS_login_request();

  CLS_login_request(const CLS_login_request& from);

  inline CLS_login_request& operator=(const CLS_login_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CLS_login_request& default_instance();

  void Swap(CLS_login_request* other);

  // implements Message ----------------------------------------------

  inline CLS_login_request* New() const { return New(NULL); }

  CLS_login_request* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CLS_login_request& from);
  void MergeFrom(const CLS_login_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CLS_login_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string password = 2;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:LoginProtocol.CLS_login_request)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  friend void  protobuf_AddDesc_LoginMessage_2ePROTO();
  friend void protobuf_AssignDesc_LoginMessage_2ePROTO();
  friend void protobuf_ShutdownFile_LoginMessage_2ePROTO();

  void InitAsDefaultInstance();
  static CLS_login_request* default_instance_;
};
// -------------------------------------------------------------------

class LSC_login_result : public ::google::protobuf::Message {
 public:
  LSC_login_result();
  virtual ~LSC_login_result();

  LSC_login_result(const LSC_login_result& from);

  inline LSC_login_result& operator=(const LSC_login_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LSC_login_result& default_instance();

  void Swap(LSC_login_result* other);

  // implements Message ----------------------------------------------

  inline LSC_login_result* New() const { return New(NULL); }

  LSC_login_result* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LSC_login_result& from);
  void MergeFrom(const LSC_login_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LSC_login_result* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .LoginProtocol.FailSignal failsignal = 1;
  bool has_failsignal() const;
  void clear_failsignal();
  static const int kFailsignalFieldNumber = 1;
  ::LoginProtocol::FailSignal failsignal() const;
  void set_failsignal(::LoginProtocol::FailSignal value);

  // @@protoc_insertion_point(class_scope:LoginProtocol.LSC_login_result)
 private:
  inline void set_has_failsignal();
  inline void clear_has_failsignal();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int failsignal_;
  friend void  protobuf_AddDesc_LoginMessage_2ePROTO();
  friend void protobuf_AssignDesc_LoginMessage_2ePROTO();
  friend void protobuf_ShutdownFile_LoginMessage_2ePROTO();

  void InitAsDefaultInstance();
  static LSC_login_result* default_instance_;
};
// -------------------------------------------------------------------

class CLS_account_create : public ::google::protobuf::Message {
 public:
  CLS_account_create();
  virtual ~CLS_account_create();

  CLS_account_create(const CLS_account_create& from);

  inline CLS_account_create& operator=(const CLS_account_create& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CLS_account_create& default_instance();

  void Swap(CLS_account_create* other);

  // implements Message ----------------------------------------------

  inline CLS_account_create* New() const { return New(NULL); }

  CLS_account_create* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CLS_account_create& from);
  void MergeFrom(const CLS_account_create& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CLS_account_create* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string password = 2;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:LoginProtocol.CLS_account_create)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  friend void  protobuf_AddDesc_LoginMessage_2ePROTO();
  friend void protobuf_AssignDesc_LoginMessage_2ePROTO();
  friend void protobuf_ShutdownFile_LoginMessage_2ePROTO();

  void InitAsDefaultInstance();
  static CLS_account_create* default_instance_;
};
// -------------------------------------------------------------------

class LSC_account_create_result : public ::google::protobuf::Message {
 public:
  LSC_account_create_result();
  virtual ~LSC_account_create_result();

  LSC_account_create_result(const LSC_account_create_result& from);

  inline LSC_account_create_result& operator=(const LSC_account_create_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LSC_account_create_result& default_instance();

  void Swap(LSC_account_create_result* other);

  // implements Message ----------------------------------------------

  inline LSC_account_create_result* New() const { return New(NULL); }

  LSC_account_create_result* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LSC_account_create_result& from);
  void MergeFrom(const LSC_account_create_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LSC_account_create_result* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .LoginProtocol.FailSignal failSignal = 1;
  bool has_failsignal() const;
  void clear_failsignal();
  static const int kFailSignalFieldNumber = 1;
  ::LoginProtocol::FailSignal failsignal() const;
  void set_failsignal(::LoginProtocol::FailSignal value);

  // @@protoc_insertion_point(class_scope:LoginProtocol.LSC_account_create_result)
 private:
  inline void set_has_failsignal();
  inline void clear_has_failsignal();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int failsignal_;
  friend void  protobuf_AddDesc_LoginMessage_2ePROTO();
  friend void protobuf_AssignDesc_LoginMessage_2ePROTO();
  friend void protobuf_ShutdownFile_LoginMessage_2ePROTO();

  void InitAsDefaultInstance();
  static LSC_account_create_result* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CLS_login_request

// optional string id = 1;
inline bool CLS_login_request::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CLS_login_request::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CLS_login_request::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CLS_login_request::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& CLS_login_request::id() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.CLS_login_request.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CLS_login_request::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginProtocol.CLS_login_request.id)
}
inline void CLS_login_request::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginProtocol.CLS_login_request.id)
}
inline void CLS_login_request::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginProtocol.CLS_login_request.id)
}
inline ::std::string* CLS_login_request::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:LoginProtocol.CLS_login_request.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CLS_login_request::release_id() {
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CLS_login_request::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:LoginProtocol.CLS_login_request.id)
}

// optional string password = 2;
inline bool CLS_login_request::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CLS_login_request::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CLS_login_request::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CLS_login_request::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& CLS_login_request::password() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.CLS_login_request.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CLS_login_request::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginProtocol.CLS_login_request.password)
}
inline void CLS_login_request::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginProtocol.CLS_login_request.password)
}
inline void CLS_login_request::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginProtocol.CLS_login_request.password)
}
inline ::std::string* CLS_login_request::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:LoginProtocol.CLS_login_request.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CLS_login_request::release_password() {
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CLS_login_request::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:LoginProtocol.CLS_login_request.password)
}

// -------------------------------------------------------------------

// LSC_login_result

// optional .LoginProtocol.FailSignal failsignal = 1;
inline bool LSC_login_result::has_failsignal() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LSC_login_result::set_has_failsignal() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LSC_login_result::clear_has_failsignal() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LSC_login_result::clear_failsignal() {
  failsignal_ = 0;
  clear_has_failsignal();
}
inline ::LoginProtocol::FailSignal LSC_login_result::failsignal() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.LSC_login_result.failsignal)
  return static_cast< ::LoginProtocol::FailSignal >(failsignal_);
}
inline void LSC_login_result::set_failsignal(::LoginProtocol::FailSignal value) {
  assert(::LoginProtocol::FailSignal_IsValid(value));
  set_has_failsignal();
  failsignal_ = value;
  // @@protoc_insertion_point(field_set:LoginProtocol.LSC_login_result.failsignal)
}

// -------------------------------------------------------------------

// CLS_account_create

// optional string id = 1;
inline bool CLS_account_create::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CLS_account_create::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CLS_account_create::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CLS_account_create::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& CLS_account_create::id() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.CLS_account_create.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CLS_account_create::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginProtocol.CLS_account_create.id)
}
inline void CLS_account_create::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginProtocol.CLS_account_create.id)
}
inline void CLS_account_create::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginProtocol.CLS_account_create.id)
}
inline ::std::string* CLS_account_create::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:LoginProtocol.CLS_account_create.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CLS_account_create::release_id() {
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CLS_account_create::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:LoginProtocol.CLS_account_create.id)
}

// optional string password = 2;
inline bool CLS_account_create::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CLS_account_create::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CLS_account_create::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CLS_account_create::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& CLS_account_create::password() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.CLS_account_create.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CLS_account_create::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LoginProtocol.CLS_account_create.password)
}
inline void CLS_account_create::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LoginProtocol.CLS_account_create.password)
}
inline void CLS_account_create::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LoginProtocol.CLS_account_create.password)
}
inline ::std::string* CLS_account_create::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:LoginProtocol.CLS_account_create.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CLS_account_create::release_password() {
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CLS_account_create::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:LoginProtocol.CLS_account_create.password)
}

// -------------------------------------------------------------------

// LSC_account_create_result

// optional .LoginProtocol.FailSignal failSignal = 1;
inline bool LSC_account_create_result::has_failsignal() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LSC_account_create_result::set_has_failsignal() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LSC_account_create_result::clear_has_failsignal() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LSC_account_create_result::clear_failsignal() {
  failsignal_ = 0;
  clear_has_failsignal();
}
inline ::LoginProtocol::FailSignal LSC_account_create_result::failsignal() const {
  // @@protoc_insertion_point(field_get:LoginProtocol.LSC_account_create_result.failSignal)
  return static_cast< ::LoginProtocol::FailSignal >(failsignal_);
}
inline void LSC_account_create_result::set_failsignal(::LoginProtocol::FailSignal value) {
  assert(::LoginProtocol::FailSignal_IsValid(value));
  set_has_failsignal();
  failsignal_ = value;
  // @@protoc_insertion_point(field_set:LoginProtocol.LSC_account_create_result.failSignal)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LoginProtocol

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::LoginProtocol::PacketType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LoginProtocol::PacketType>() {
  return ::LoginProtocol::PacketType_descriptor();
}
template <> struct is_proto_enum< ::LoginProtocol::FailSignal> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LoginProtocol::FailSignal>() {
  return ::LoginProtocol::FailSignal_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LoginMessage_2ePROTO__INCLUDED
