// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LoginMessage.proto
#pragma warning(disable : 4996)

#ifndef PROTOBUF_LoginMessage_2eproto__INCLUDED
#define PROTOBUF_LoginMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "GamePacketEnumeration.pb.h"
// @@protoc_insertion_point(includes)

namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LoginMessage_2eproto();
void protobuf_AssignDesc_LoginMessage_2eproto();
void protobuf_ShutdownFile_LoginMessage_2eproto();

class CLS_login_request;
class LSC_login_result;
class CLS_account_create;
class LSC_account_create_result;

// ===================================================================

class CLS_login_request : public ::google::protobuf::Message {
 public:
  CLS_login_request();
  virtual ~CLS_login_request();

  CLS_login_request(const CLS_login_request& from);

  inline CLS_login_request& operator=(const CLS_login_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CLS_login_request& default_instance();

  void Swap(CLS_login_request* other);

  // implements Message ----------------------------------------------

  CLS_login_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CLS_login_request& from);
  void MergeFrom(const CLS_login_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:protocol.CLS_login_request)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* password_;
  friend void  protobuf_AddDesc_LoginMessage_2eproto();
  friend void protobuf_AssignDesc_LoginMessage_2eproto();
  friend void protobuf_ShutdownFile_LoginMessage_2eproto();

  void InitAsDefaultInstance();
  static CLS_login_request* default_instance_;
};
// -------------------------------------------------------------------

class LSC_login_result : public ::google::protobuf::Message {
 public:
  LSC_login_result();
  virtual ~LSC_login_result();

  LSC_login_result(const LSC_login_result& from);

  inline LSC_login_result& operator=(const LSC_login_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LSC_login_result& default_instance();

  void Swap(LSC_login_result* other);

  // implements Message ----------------------------------------------

  LSC_login_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LSC_login_result& from);
  void MergeFrom(const LSC_login_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .protocol.FailSignal failsignal = 1;
  inline bool has_failsignal() const;
  inline void clear_failsignal();
  static const int kFailsignalFieldNumber = 1;
  inline ::protocol::FailSignal failsignal() const;
  inline void set_failsignal(::protocol::FailSignal value);

  // @@protoc_insertion_point(class_scope:protocol.LSC_login_result)
 private:
  inline void set_has_failsignal();
  inline void clear_has_failsignal();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int failsignal_;
  friend void  protobuf_AddDesc_LoginMessage_2eproto();
  friend void protobuf_AssignDesc_LoginMessage_2eproto();
  friend void protobuf_ShutdownFile_LoginMessage_2eproto();

  void InitAsDefaultInstance();
  static LSC_login_result* default_instance_;
};
// -------------------------------------------------------------------

class CLS_account_create : public ::google::protobuf::Message {
 public:
  CLS_account_create();
  virtual ~CLS_account_create();

  CLS_account_create(const CLS_account_create& from);

  inline CLS_account_create& operator=(const CLS_account_create& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CLS_account_create& default_instance();

  void Swap(CLS_account_create* other);

  // implements Message ----------------------------------------------

  CLS_account_create* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CLS_account_create& from);
  void MergeFrom(const CLS_account_create& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:protocol.CLS_account_create)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* password_;
  friend void  protobuf_AddDesc_LoginMessage_2eproto();
  friend void protobuf_AssignDesc_LoginMessage_2eproto();
  friend void protobuf_ShutdownFile_LoginMessage_2eproto();

  void InitAsDefaultInstance();
  static CLS_account_create* default_instance_;
};
// -------------------------------------------------------------------

class LSC_account_create_result : public ::google::protobuf::Message {
 public:
  LSC_account_create_result();
  virtual ~LSC_account_create_result();

  LSC_account_create_result(const LSC_account_create_result& from);

  inline LSC_account_create_result& operator=(const LSC_account_create_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LSC_account_create_result& default_instance();

  void Swap(LSC_account_create_result* other);

  // implements Message ----------------------------------------------

  LSC_account_create_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LSC_account_create_result& from);
  void MergeFrom(const LSC_account_create_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .protocol.FailSignal failSignal = 1;
  inline bool has_failsignal() const;
  inline void clear_failsignal();
  static const int kFailSignalFieldNumber = 1;
  inline ::protocol::FailSignal failsignal() const;
  inline void set_failsignal(::protocol::FailSignal value);

  // @@protoc_insertion_point(class_scope:protocol.LSC_account_create_result)
 private:
  inline void set_has_failsignal();
  inline void clear_has_failsignal();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int failsignal_;
  friend void  protobuf_AddDesc_LoginMessage_2eproto();
  friend void protobuf_AssignDesc_LoginMessage_2eproto();
  friend void protobuf_ShutdownFile_LoginMessage_2eproto();

  void InitAsDefaultInstance();
  static LSC_account_create_result* default_instance_;
};
// ===================================================================


// ===================================================================

// CLS_login_request

// optional string id = 1;
inline bool CLS_login_request::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CLS_login_request::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CLS_login_request::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CLS_login_request::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& CLS_login_request::id() const {
  // @@protoc_insertion_point(field_get:protocol.CLS_login_request.id)
  return *id_;
}
inline void CLS_login_request::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:protocol.CLS_login_request.id)
}
inline void CLS_login_request::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.CLS_login_request.id)
}
inline void CLS_login_request::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.CLS_login_request.id)
}
inline ::std::string* CLS_login_request::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protocol.CLS_login_request.id)
  return id_;
}
inline ::std::string* CLS_login_request::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CLS_login_request::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.CLS_login_request.id)
}

// optional string password = 2;
inline bool CLS_login_request::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CLS_login_request::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CLS_login_request::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CLS_login_request::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& CLS_login_request::password() const {
  // @@protoc_insertion_point(field_get:protocol.CLS_login_request.password)
  return *password_;
}
inline void CLS_login_request::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:protocol.CLS_login_request.password)
}
inline void CLS_login_request::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.CLS_login_request.password)
}
inline void CLS_login_request::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.CLS_login_request.password)
}
inline ::std::string* CLS_login_request::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protocol.CLS_login_request.password)
  return password_;
}
inline ::std::string* CLS_login_request::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CLS_login_request::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.CLS_login_request.password)
}

// -------------------------------------------------------------------

// LSC_login_result

// optional .protocol.FailSignal failsignal = 1;
inline bool LSC_login_result::has_failsignal() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LSC_login_result::set_has_failsignal() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LSC_login_result::clear_has_failsignal() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LSC_login_result::clear_failsignal() {
  failsignal_ = 0;
  clear_has_failsignal();
}
inline ::protocol::FailSignal LSC_login_result::failsignal() const {
  // @@protoc_insertion_point(field_get:protocol.LSC_login_result.failsignal)
  return static_cast< ::protocol::FailSignal >(failsignal_);
}
inline void LSC_login_result::set_failsignal(::protocol::FailSignal value) {
  assert(::protocol::FailSignal_IsValid(value));
  set_has_failsignal();
  failsignal_ = value;
  // @@protoc_insertion_point(field_set:protocol.LSC_login_result.failsignal)
}

// -------------------------------------------------------------------

// CLS_account_create

// optional string id = 1;
inline bool CLS_account_create::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CLS_account_create::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CLS_account_create::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CLS_account_create::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& CLS_account_create::id() const {
  // @@protoc_insertion_point(field_get:protocol.CLS_account_create.id)
  return *id_;
}
inline void CLS_account_create::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:protocol.CLS_account_create.id)
}
inline void CLS_account_create::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.CLS_account_create.id)
}
inline void CLS_account_create::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.CLS_account_create.id)
}
inline ::std::string* CLS_account_create::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protocol.CLS_account_create.id)
  return id_;
}
inline ::std::string* CLS_account_create::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CLS_account_create::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.CLS_account_create.id)
}

// optional string password = 2;
inline bool CLS_account_create::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CLS_account_create::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CLS_account_create::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CLS_account_create::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& CLS_account_create::password() const {
  // @@protoc_insertion_point(field_get:protocol.CLS_account_create.password)
  return *password_;
}
inline void CLS_account_create::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:protocol.CLS_account_create.password)
}
inline void CLS_account_create::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.CLS_account_create.password)
}
inline void CLS_account_create::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.CLS_account_create.password)
}
inline ::std::string* CLS_account_create::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:protocol.CLS_account_create.password)
  return password_;
}
inline ::std::string* CLS_account_create::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CLS_account_create::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.CLS_account_create.password)
}

// -------------------------------------------------------------------

// LSC_account_create_result

// optional .protocol.FailSignal failSignal = 1;
inline bool LSC_account_create_result::has_failsignal() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LSC_account_create_result::set_has_failsignal() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LSC_account_create_result::clear_has_failsignal() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LSC_account_create_result::clear_failsignal() {
  failsignal_ = 0;
  clear_has_failsignal();
}
inline ::protocol::FailSignal LSC_account_create_result::failsignal() const {
  // @@protoc_insertion_point(field_get:protocol.LSC_account_create_result.failSignal)
  return static_cast< ::protocol::FailSignal >(failsignal_);
}
inline void LSC_account_create_result::set_failsignal(::protocol::FailSignal value) {
  assert(::protocol::FailSignal_IsValid(value));
  set_has_failsignal();
  failsignal_ = value;
  // @@protoc_insertion_point(field_set:protocol.LSC_account_create_result.failSignal)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LoginMessage_2eproto__INCLUDED
