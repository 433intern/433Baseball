// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GamePacketEnumeration.proto

#ifndef PROTOBUF_GamePacketEnumeration_2eproto__INCLUDED
#define PROTOBUF_GamePacketEnumeration_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GamePacketEnumeration_2eproto();
void protobuf_AssignDesc_GamePacketEnumeration_2eproto();
void protobuf_ShutdownFile_GamePacketEnumeration_2eproto();

class PacketHeader;

enum PacketType {
  UNKNOWN = 0,
  CS_ROOM_CREATE = 1,
  CS_ROOM_JOIN = 2,
  CS_ROOM_LEAVE = 3,
  CS_REQUEST_INGAME_START = 4,
  SC_ROOM_CREATE_SUCCESS = 5,
  SC_ROOM_CREATE_FAILED = 6,
  SC_ROOM_JOIN_SUCCESS = 7,
  SC_ROOM_JOIN_FAILED = 8,
  SC_ROOM_LEAVE_SUCCESS = 9,
  SC_ROOM_LEAVE_FAILED = 10,
  CS_SEND_BASEBALL_NUMBER = 11,
  SC_INGAME_START_SUCCESS = 12,
  SC_INGAME_START_FAILED = 13,
  SC_RECEIVE_BASEBALL_NUMBER_SUCCESS = 14,
  SC_RECEIVE_BASEBALL_NUMBER_FAILED = 15,
  SC_GIVE_TURN = 16,
  SC_WAIT_TURN = 17,
  SC_INGAME_END = 18,
  CLS_LOGIN_REQUEST = 19,
  LSC_LOGIN_SUCCESS = 20,
  LSC_LOGIN_FAILED = 21,
  CLS_ACCOUNT_CREATE = 22,
  LSC_ACCOUNT_CREATE_SUCCESS = 23,
  LSC_ACCOUNT_CREATE_FAILED = 24
};
bool PacketType_IsValid(int value);
const PacketType PacketType_MIN = UNKNOWN;
const PacketType PacketType_MAX = LSC_ACCOUNT_CREATE_FAILED;
const int PacketType_ARRAYSIZE = PacketType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PacketType_descriptor();
inline const ::std::string& PacketType_Name(PacketType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PacketType_descriptor(), value);
}
inline bool PacketType_Parse(
    const ::std::string& name, PacketType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PacketType>(
    PacketType_descriptor(), name, value);
}
enum FailSignal {
  NO_EXIST = 0,
  FULL_ROOM = 1,
  EXIST_REPETITION_NUMBER = 2,
  ALREADY_EXIST = 3,
  WRONG_PASSWORD = 4
};
bool FailSignal_IsValid(int value);
const FailSignal FailSignal_MIN = NO_EXIST;
const FailSignal FailSignal_MAX = WRONG_PASSWORD;
const int FailSignal_ARRAYSIZE = FailSignal_MAX + 1;

const ::google::protobuf::EnumDescriptor* FailSignal_descriptor();
inline const ::std::string& FailSignal_Name(FailSignal value) {
  return ::google::protobuf::internal::NameOfEnum(
    FailSignal_descriptor(), value);
}
inline bool FailSignal_Parse(
    const ::std::string& name, FailSignal* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FailSignal>(
    FailSignal_descriptor(), name, value);
}
// ===================================================================

class PacketHeader : public ::google::protobuf::Message {
 public:
  PacketHeader();
  virtual ~PacketHeader();

  PacketHeader(const PacketHeader& from);

  inline PacketHeader& operator=(const PacketHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PacketHeader& default_instance();

  void Swap(PacketHeader* other);

  // implements Message ----------------------------------------------

  PacketHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PacketHeader& from);
  void MergeFrom(const PacketHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 size = 1;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline ::google::protobuf::uint32 size() const;
  inline void set_size(::google::protobuf::uint32 value);

  // optional .protocol.PacketType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::protocol::PacketType type() const;
  inline void set_type(::protocol::PacketType value);

  // @@protoc_insertion_point(class_scope:protocol.PacketHeader)
 private:
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 size_;
  int type_;
  friend void  protobuf_AddDesc_GamePacketEnumeration_2eproto();
  friend void protobuf_AssignDesc_GamePacketEnumeration_2eproto();
  friend void protobuf_ShutdownFile_GamePacketEnumeration_2eproto();

  void InitAsDefaultInstance();
  static PacketHeader* default_instance_;
};
// ===================================================================


// ===================================================================

// PacketHeader

// optional uint32 size = 1;
inline bool PacketHeader::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PacketHeader::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PacketHeader::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PacketHeader::clear_size() {
  size_ = 0u;
  clear_has_size();
}
inline ::google::protobuf::uint32 PacketHeader::size() const {
  // @@protoc_insertion_point(field_get:protocol.PacketHeader.size)
  return size_;
}
inline void PacketHeader::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:protocol.PacketHeader.size)
}

// optional .protocol.PacketType type = 2;
inline bool PacketHeader::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PacketHeader::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PacketHeader::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PacketHeader::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::protocol::PacketType PacketHeader::type() const {
  // @@protoc_insertion_point(field_get:protocol.PacketHeader.type)
  return static_cast< ::protocol::PacketType >(type_);
}
inline void PacketHeader::set_type(::protocol::PacketType value) {
  assert(::protocol::PacketType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.PacketHeader.type)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::protocol::PacketType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::PacketType>() {
  return ::protocol::PacketType_descriptor();
}
template <> struct is_proto_enum< ::protocol::FailSignal> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::FailSignal>() {
  return ::protocol::FailSignal_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GamePacketEnumeration_2eproto__INCLUDED
