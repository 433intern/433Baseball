// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IngamePacket.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "IngamePacket.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {

namespace {

const ::google::protobuf::Descriptor* CS_send_baseball_number_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_send_baseball_number_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_receive_baseball_number_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_receive_baseball_number_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_give_turn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_give_turn_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_wait_turn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_wait_turn_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_ingame_end_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_ingame_end_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_IngamePacket_2eproto() {
  protobuf_AddDesc_IngamePacket_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "IngamePacket.proto");
  GOOGLE_CHECK(file != NULL);
  CS_send_baseball_number_descriptor_ = file->message_type(0);
  static const int CS_send_baseball_number_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_send_baseball_number, baseballnum_),
  };
  CS_send_baseball_number_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CS_send_baseball_number_descriptor_,
      CS_send_baseball_number::default_instance_,
      CS_send_baseball_number_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_send_baseball_number, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_send_baseball_number, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CS_send_baseball_number));
  SC_receive_baseball_number_result_descriptor_ = file->message_type(1);
  static const int SC_receive_baseball_number_result_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_receive_baseball_number_result, judgestatus_),
  };
  SC_receive_baseball_number_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_receive_baseball_number_result_descriptor_,
      SC_receive_baseball_number_result::default_instance_,
      SC_receive_baseball_number_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_receive_baseball_number_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_receive_baseball_number_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_receive_baseball_number_result));
  SC_give_turn_descriptor_ = file->message_type(2);
  static const int SC_give_turn_offsets_[1] = {
  };
  SC_give_turn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_give_turn_descriptor_,
      SC_give_turn::default_instance_,
      SC_give_turn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_give_turn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_give_turn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_give_turn));
  SC_wait_turn_descriptor_ = file->message_type(3);
  static const int SC_wait_turn_offsets_[1] = {
  };
  SC_wait_turn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_wait_turn_descriptor_,
      SC_wait_turn::default_instance_,
      SC_wait_turn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_wait_turn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_wait_turn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_wait_turn));
  SC_ingame_end_descriptor_ = file->message_type(4);
  static const int SC_ingame_end_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ingame_end, iswin_),
  };
  SC_ingame_end_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SC_ingame_end_descriptor_,
      SC_ingame_end::default_instance_,
      SC_ingame_end_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ingame_end, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_ingame_end, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SC_ingame_end));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_IngamePacket_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CS_send_baseball_number_descriptor_, &CS_send_baseball_number::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_receive_baseball_number_result_descriptor_, &SC_receive_baseball_number_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_give_turn_descriptor_, &SC_give_turn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_wait_turn_descriptor_, &SC_wait_turn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SC_ingame_end_descriptor_, &SC_ingame_end::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_IngamePacket_2eproto() {
  delete CS_send_baseball_number::default_instance_;
  delete CS_send_baseball_number_reflection_;
  delete SC_receive_baseball_number_result::default_instance_;
  delete SC_receive_baseball_number_result_reflection_;
  delete SC_give_turn::default_instance_;
  delete SC_give_turn_reflection_;
  delete SC_wait_turn::default_instance_;
  delete SC_wait_turn_reflection_;
  delete SC_ingame_end::default_instance_;
  delete SC_ingame_end_reflection_;
}

void protobuf_AddDesc_IngamePacket_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protocol::protobuf_AddDesc_GamePacketEnumeration_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022IngamePacket.proto\022\010protocol\032\033GamePack"
    "etEnumeration.PROTO\".\n\027CS_send_baseball_"
    "number\022\023\n\013baseballNum\030\001 \001(\r\"8\n!SC_receiv"
    "e_baseball_number_result\022\023\n\013judgeStatus\030"
    "\001 \001(\r\"\016\n\014SC_give_turn\"\016\n\014SC_wait_turn\"\036\n"
    "\rSC_ingame_end\022\r\n\005isWin\030\001 \001(\010P\000", 231);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "IngamePacket.proto", &protobuf_RegisterTypes);
  CS_send_baseball_number::default_instance_ = new CS_send_baseball_number();
  SC_receive_baseball_number_result::default_instance_ = new SC_receive_baseball_number_result();
  SC_give_turn::default_instance_ = new SC_give_turn();
  SC_wait_turn::default_instance_ = new SC_wait_turn();
  SC_ingame_end::default_instance_ = new SC_ingame_end();
  CS_send_baseball_number::default_instance_->InitAsDefaultInstance();
  SC_receive_baseball_number_result::default_instance_->InitAsDefaultInstance();
  SC_give_turn::default_instance_->InitAsDefaultInstance();
  SC_wait_turn::default_instance_->InitAsDefaultInstance();
  SC_ingame_end::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_IngamePacket_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_IngamePacket_2eproto {
  StaticDescriptorInitializer_IngamePacket_2eproto() {
    protobuf_AddDesc_IngamePacket_2eproto();
  }
} static_descriptor_initializer_IngamePacket_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CS_send_baseball_number::kBaseballNumFieldNumber;
#endif  // !_MSC_VER

CS_send_baseball_number::CS_send_baseball_number()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.CS_send_baseball_number)
}

void CS_send_baseball_number::InitAsDefaultInstance() {
}

CS_send_baseball_number::CS_send_baseball_number(const CS_send_baseball_number& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.CS_send_baseball_number)
}

void CS_send_baseball_number::SharedCtor() {
  _cached_size_ = 0;
  baseballnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CS_send_baseball_number::~CS_send_baseball_number() {
  // @@protoc_insertion_point(destructor:protocol.CS_send_baseball_number)
  SharedDtor();
}

void CS_send_baseball_number::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CS_send_baseball_number::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_send_baseball_number::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_send_baseball_number_descriptor_;
}

const CS_send_baseball_number& CS_send_baseball_number::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IngamePacket_2eproto();
  return *default_instance_;
}

CS_send_baseball_number* CS_send_baseball_number::default_instance_ = NULL;

CS_send_baseball_number* CS_send_baseball_number::New() const {
  return new CS_send_baseball_number;
}

void CS_send_baseball_number::Clear() {
  baseballnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CS_send_baseball_number::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.CS_send_baseball_number)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 baseballNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &baseballnum_)));
          set_has_baseballnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.CS_send_baseball_number)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.CS_send_baseball_number)
  return false;
#undef DO_
}

void CS_send_baseball_number::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.CS_send_baseball_number)
  // optional uint32 baseballNum = 1;
  if (has_baseballnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->baseballnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.CS_send_baseball_number)
}

::google::protobuf::uint8* CS_send_baseball_number::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.CS_send_baseball_number)
  // optional uint32 baseballNum = 1;
  if (has_baseballnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->baseballnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.CS_send_baseball_number)
  return target;
}

int CS_send_baseball_number::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 baseballNum = 1;
    if (has_baseballnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->baseballnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_send_baseball_number::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CS_send_baseball_number* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CS_send_baseball_number*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CS_send_baseball_number::MergeFrom(const CS_send_baseball_number& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseballnum()) {
      set_baseballnum(from.baseballnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CS_send_baseball_number::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_send_baseball_number::CopyFrom(const CS_send_baseball_number& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_send_baseball_number::IsInitialized() const {

  return true;
}

void CS_send_baseball_number::Swap(CS_send_baseball_number* other) {
  if (other != this) {
    std::swap(baseballnum_, other->baseballnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CS_send_baseball_number::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_send_baseball_number_descriptor_;
  metadata.reflection = CS_send_baseball_number_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_receive_baseball_number_result::kJudgeStatusFieldNumber;
#endif  // !_MSC_VER

SC_receive_baseball_number_result::SC_receive_baseball_number_result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.SC_receive_baseball_number_result)
}

void SC_receive_baseball_number_result::InitAsDefaultInstance() {
}

SC_receive_baseball_number_result::SC_receive_baseball_number_result(const SC_receive_baseball_number_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.SC_receive_baseball_number_result)
}

void SC_receive_baseball_number_result::SharedCtor() {
  _cached_size_ = 0;
  judgestatus_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_receive_baseball_number_result::~SC_receive_baseball_number_result() {
  // @@protoc_insertion_point(destructor:protocol.SC_receive_baseball_number_result)
  SharedDtor();
}

void SC_receive_baseball_number_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_receive_baseball_number_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_receive_baseball_number_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_receive_baseball_number_result_descriptor_;
}

const SC_receive_baseball_number_result& SC_receive_baseball_number_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IngamePacket_2eproto();
  return *default_instance_;
}

SC_receive_baseball_number_result* SC_receive_baseball_number_result::default_instance_ = NULL;

SC_receive_baseball_number_result* SC_receive_baseball_number_result::New() const {
  return new SC_receive_baseball_number_result;
}

void SC_receive_baseball_number_result::Clear() {
  judgestatus_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_receive_baseball_number_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.SC_receive_baseball_number_result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 judgeStatus = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &judgestatus_)));
          set_has_judgestatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.SC_receive_baseball_number_result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.SC_receive_baseball_number_result)
  return false;
#undef DO_
}

void SC_receive_baseball_number_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.SC_receive_baseball_number_result)
  // optional uint32 judgeStatus = 1;
  if (has_judgestatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->judgestatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.SC_receive_baseball_number_result)
}

::google::protobuf::uint8* SC_receive_baseball_number_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SC_receive_baseball_number_result)
  // optional uint32 judgeStatus = 1;
  if (has_judgestatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->judgestatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.SC_receive_baseball_number_result)
  return target;
}

int SC_receive_baseball_number_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 judgeStatus = 1;
    if (has_judgestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->judgestatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_receive_baseball_number_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_receive_baseball_number_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_receive_baseball_number_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_receive_baseball_number_result::MergeFrom(const SC_receive_baseball_number_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_judgestatus()) {
      set_judgestatus(from.judgestatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_receive_baseball_number_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_receive_baseball_number_result::CopyFrom(const SC_receive_baseball_number_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_receive_baseball_number_result::IsInitialized() const {

  return true;
}

void SC_receive_baseball_number_result::Swap(SC_receive_baseball_number_result* other) {
  if (other != this) {
    std::swap(judgestatus_, other->judgestatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_receive_baseball_number_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_receive_baseball_number_result_descriptor_;
  metadata.reflection = SC_receive_baseball_number_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SC_give_turn::SC_give_turn()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.SC_give_turn)
}

void SC_give_turn::InitAsDefaultInstance() {
}

SC_give_turn::SC_give_turn(const SC_give_turn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.SC_give_turn)
}

void SC_give_turn::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_give_turn::~SC_give_turn() {
  // @@protoc_insertion_point(destructor:protocol.SC_give_turn)
  SharedDtor();
}

void SC_give_turn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_give_turn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_give_turn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_give_turn_descriptor_;
}

const SC_give_turn& SC_give_turn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IngamePacket_2eproto();
  return *default_instance_;
}

SC_give_turn* SC_give_turn::default_instance_ = NULL;

SC_give_turn* SC_give_turn::New() const {
  return new SC_give_turn;
}

void SC_give_turn::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_give_turn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.SC_give_turn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.SC_give_turn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.SC_give_turn)
  return false;
#undef DO_
}

void SC_give_turn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.SC_give_turn)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.SC_give_turn)
}

::google::protobuf::uint8* SC_give_turn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SC_give_turn)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.SC_give_turn)
  return target;
}

int SC_give_turn::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_give_turn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_give_turn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_give_turn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_give_turn::MergeFrom(const SC_give_turn& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_give_turn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_give_turn::CopyFrom(const SC_give_turn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_give_turn::IsInitialized() const {

  return true;
}

void SC_give_turn::Swap(SC_give_turn* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_give_turn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_give_turn_descriptor_;
  metadata.reflection = SC_give_turn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SC_wait_turn::SC_wait_turn()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.SC_wait_turn)
}

void SC_wait_turn::InitAsDefaultInstance() {
}

SC_wait_turn::SC_wait_turn(const SC_wait_turn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.SC_wait_turn)
}

void SC_wait_turn::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_wait_turn::~SC_wait_turn() {
  // @@protoc_insertion_point(destructor:protocol.SC_wait_turn)
  SharedDtor();
}

void SC_wait_turn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_wait_turn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_wait_turn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_wait_turn_descriptor_;
}

const SC_wait_turn& SC_wait_turn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IngamePacket_2eproto();
  return *default_instance_;
}

SC_wait_turn* SC_wait_turn::default_instance_ = NULL;

SC_wait_turn* SC_wait_turn::New() const {
  return new SC_wait_turn;
}

void SC_wait_turn::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_wait_turn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.SC_wait_turn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.SC_wait_turn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.SC_wait_turn)
  return false;
#undef DO_
}

void SC_wait_turn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.SC_wait_turn)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.SC_wait_turn)
}

::google::protobuf::uint8* SC_wait_turn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SC_wait_turn)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.SC_wait_turn)
  return target;
}

int SC_wait_turn::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_wait_turn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_wait_turn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_wait_turn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_wait_turn::MergeFrom(const SC_wait_turn& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_wait_turn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_wait_turn::CopyFrom(const SC_wait_turn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_wait_turn::IsInitialized() const {

  return true;
}

void SC_wait_turn::Swap(SC_wait_turn* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_wait_turn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_wait_turn_descriptor_;
  metadata.reflection = SC_wait_turn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SC_ingame_end::kIsWinFieldNumber;
#endif  // !_MSC_VER

SC_ingame_end::SC_ingame_end()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.SC_ingame_end)
}

void SC_ingame_end::InitAsDefaultInstance() {
}

SC_ingame_end::SC_ingame_end(const SC_ingame_end& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.SC_ingame_end)
}

void SC_ingame_end::SharedCtor() {
  _cached_size_ = 0;
  iswin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SC_ingame_end::~SC_ingame_end() {
  // @@protoc_insertion_point(destructor:protocol.SC_ingame_end)
  SharedDtor();
}

void SC_ingame_end::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_ingame_end::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_ingame_end::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_ingame_end_descriptor_;
}

const SC_ingame_end& SC_ingame_end::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_IngamePacket_2eproto();
  return *default_instance_;
}

SC_ingame_end* SC_ingame_end::default_instance_ = NULL;

SC_ingame_end* SC_ingame_end::New() const {
  return new SC_ingame_end;
}

void SC_ingame_end::Clear() {
  iswin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SC_ingame_end::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.SC_ingame_end)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isWin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswin_)));
          set_has_iswin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.SC_ingame_end)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.SC_ingame_end)
  return false;
#undef DO_
}

void SC_ingame_end::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.SC_ingame_end)
  // optional bool isWin = 1;
  if (has_iswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->iswin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.SC_ingame_end)
}

::google::protobuf::uint8* SC_ingame_end::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SC_ingame_end)
  // optional bool isWin = 1;
  if (has_iswin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->iswin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.SC_ingame_end)
  return target;
}

int SC_ingame_end::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isWin = 1;
    if (has_iswin()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_ingame_end::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SC_ingame_end* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SC_ingame_end*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SC_ingame_end::MergeFrom(const SC_ingame_end& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iswin()) {
      set_iswin(from.iswin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SC_ingame_end::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_ingame_end::CopyFrom(const SC_ingame_end& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_ingame_end::IsInitialized() const {

  return true;
}

void SC_ingame_end::Swap(SC_ingame_end* other) {
  if (other != this) {
    std::swap(iswin_, other->iswin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SC_ingame_end::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_ingame_end_descriptor_;
  metadata.reflection = SC_ingame_end_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)
